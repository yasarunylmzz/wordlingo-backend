name: Deploy to Test Environment

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.DOT_ENV }}" ]; then echo "DOT_ENV is not set!" >&2; exit 1; fi
          if [ -z "${{ secrets.SSH_KEY }}" ]; then echo "SSH_KEY is not set!" >&2; exit 1; fi
          if [ -z "${{ secrets.SSH_IP }}" ]; then echo "SSH_IP is not set!" >&2; exit 1; fi
          if [ -z "${{ secrets.SSH_USER }}" ]; then echo "SSH_USER is not set!" >&2; exit 1; fi
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then echo "DB_PASSWORD is not set!" >&2; exit 1; fi
          if [ -z "${{ secrets.DB_NAME }}" ]; then echo "DB_NAME is not set!" >&2; exit 1; fi

      - name: Create .env.test file
        run: |
          umask 077
          echo "${{ secrets.DOT_ENV }}" > .env.test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:main
            ghcr.io/${{ github.repository }}:main-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=test

  deploy:
    name: Deploy to Test Environment
    needs: build
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Agent and Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add Server to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_IP }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} "echo 'Connection successful'"

      - name: Create app directory on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} "mkdir -p ~/app"

      - name: Create Docker Compose file and .env on server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_IP: ${{ secrets.SSH_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_IP "cat > ~/app/.env << 'EOF'
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          EOF"

          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_IP "cat > ~/app/docker-compose.yml << 'EOF'
          services:
            app:
              image: ghcr.io/${{ github.repository }}:main
              ports:
                - \"8080:8080\"
              depends_on:
                - db
              environment:
                - DB_HOST=db
                - DB_USER=postgres
                - DB_PASSWORD=\${DB_PASSWORD}
                - DB_NAME=\${DB_NAME}
                - DB_PORT=5432
                - RESEND_API_KEY=\${RESEND_API_KEY}
              networks:
                - app-network
              logging:
                driver: \"json-file\"
                options:
                  max-size: \"10m\"
                  max-file: \"3\"

            db:
              image: postgres:16
              command: postgres -c listen_addresses='*'
              volumes:
                - postgres_data:/var/lib/postgresql/data
              environment:
                - POSTGRES_PASSWORD=\${DB_PASSWORD}
                - POSTGRES_USER=postgres
                - POSTGRES_DB=\${DB_NAME}
              ports:
                - \"5432:5432\"
              networks:
                - app-network
              healthcheck:
                test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]
                interval: 10s
                retries: 5
                start_period: 30s
                timeout: 10s

          volumes:
            postgres_data:

          networks:
            app-network:
          EOF"
      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.RESEND_API_KEY }}" ]; then 
            echo "::error::RESEND_API_KEY secret eksik!"
            exit 1
          fi

      - name: Deploy to Test Server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_IP: ${{ secrets.SSH_IP }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_IP << EOF
            set -e

            echo ">>> Changing to app directory"
            cd ~/app

            echo ">>> Logging into GitHub Container Registry"
            echo "${GITHUB_TOKEN}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin

            echo ">>> Pulling the latest test Docker image"
            docker compose pull

            echo ">>> Stopping existing test containers"
            docker compose down

            echo ">>> Cleaning up Docker system"
            docker system prune -af

            echo ">>> Starting test containers with the latest image"
            docker compose up -d

            echo ">>> Checking container status"
            docker compose ps

            echo ">>> Showing recent logs"
            docker compose logs --tail=50
          EOF

      - name: Notify on Success
        if: success()
        run: |
          echo "Deployment to test environment completed successfully!"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Deployment to test environment failed!"
